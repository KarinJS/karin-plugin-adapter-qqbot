// import { event, expressAfterInit } from '@/utils/common'
// import { app, logger } from 'node-karin'
// import { Request, Response } from 'express'
// import { sign } from './sign'
// import { config } from '@/utils/config'

// const c2cRouting = '/webhook/qqbot/c2c'
// const httpRouting = '/webhook/qqbot/http'

// /**
//  * api1 端到端
//  * tx -> bot/webhook/qqbot
//  */
// app.post(c2cRouting, async (req, res) => {

// })

// /**
//  * api2 接收webhook服务端转发的事件
//  * tx -> webhook -> bot/webhook/qqbot/http
//  */
// app.post(httpRouting, async (req, res) => {

// })

// /** 调整中间件顺序 不使用 */
// expressAfterInit(app._router.stack, c2cRouting, 'post')
// expressAfterInit(app._router.stack, httpRouting, 'post')

// /**
//  * webhook
//  * @param req 请求
//  * @param res 响应
//  */
// export const webhook = async (req: Request, res: Response) => {
//   let response = true
//   try {
//     const data = await checkAppid(req)
//     if (!data) return

//     const api = config()[data.appid]
//     if (!api) {
//       logger.error(`[配置错误][${data.appid}] 配置文件中未找到对应的appid，请检查配置文件`)
//       return
//     }

//     if (api.event.type !== 1) {
//       logger.error(`[配置错误][${data.appid}] webhook未启用，请检查配置文件`)
//       return
//     }

//     /** 接口初始化 鉴权回调 */
//     if (data.body.op === 13) {
//       const eventTs = data.body?.d?.event_ts
//       const plainToken = data.body?.d?.plain_token

//       if (!eventTs || !plainToken) {
//         logger.error(`[请求数据错误][${data.appid}] 未找到 event_ts 或 plain_token: ${data.rawBody}`)
//         return
//       }

//       const signature = sign(api.secret, eventTs, plainToken)
//       res.setHeader('Content-Type', 'application/json')
//       res.status(200).end(JSON.stringify({ plain_token: plainToken, signature, }))
//       response = false
//       return
//     }

//     /** 非回调事件 进行鉴权验证 */
//     const ed25519 = req.headers['x-signature-ed25519']
//     const signature = sign(api.secret, req.headers['x-signature-timestamp'] as string, data.rawBody)
//     if (ed25519 !== signature) {
//       fakeEvent(`签名验证失败:\nappid: ${data.appid}\ned25519: ${ed25519}\n实际签名: ${signature}\nbody: ${data.rawBody}`)
//       return
//     }

//     event.emit(`qqbot:${data.appid}`, data.body)
//   } finally {
//     response && res.status(200).end()
//   }
// }

// /**
//  * 判断请求是否合规并返回appid
//  * @param req 请求
//  */
// export const checkAppid = async (req: Request): Promise<{ appid: string; rawBody: string, body: Record<string, any> } | undefined> => {
//   const ip = req.socket.remoteAddress
//   const appid = req.headers['x-bot-appid'] as string
//   const rawBody = await new Promise<string>((resolve) => {
//     const raw: string[] = []
//     req.on('data', (chunk) => raw.push(chunk))
//     req.on('end', () => resolve(raw.join('')))
//   })

//   if (!appid) {
//     fakeEvent(`未找到 x-bot-appid: ${ip} body: ${rawBody}`)
//     return
//   }

//   const userAgent = req.headers['user-agent']
//   if (userAgent !== 'QQBot-Callback') {
//     fakeEvent(`未找到 User-Agent: ${ip} body: ${rawBody}`)
//     return
//   }

//   const body = JSON.parse(rawBody) || {}
//   if (typeof body.op !== 'number') {
//     fakeEvent(`非法请求体，未找到 op: ${ip} body: ${rawBody}`)
//     return
//   }

//   return { appid, rawBody, body }
// }

// /**
//  * 虚假事件
//  * @param log 日志
//  */
// export const fakeEvent = (log: string) => {
//   logger.fatal(`${logger.red('[虚假事件]')} ${log}`)
// }
